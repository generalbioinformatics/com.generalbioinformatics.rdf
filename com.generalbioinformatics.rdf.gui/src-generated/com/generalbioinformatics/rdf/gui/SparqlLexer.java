/* The following code was generated by JFlex 1.4.3 on 19/03/13 10:20 */

/* this is a scanner for SPARQL */


package com.generalbioinformatics.rdf.gui;

import jsyntaxpane.lexers.DefaultJFlexLexer;
import jsyntaxpane.Token;
import jsyntaxpane.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 19/03/13 10:20 from the specification file
 * <tt>sparql.flex</tt>
 */
public final class SparqlLexer extends DefaultJFlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\10\10\1\10\1\3\1\2\1\11\1\3\1\1\16\10\4\11\1\26"+
    "\1\12\1\11\1\0\1\5\1\0\1\64\1\0\1\56\1\57\1\12"+
    "\1\12\1\0\1\12\1\0\1\0\12\7\2\0\1\13\1\12\1\14"+
    "\1\4\1\0\1\53\3\5\1\45\1\5\1\54\1\5\1\51\2\5"+
    "\1\52\1\47\4\5\1\46\1\5\1\44\1\50\2\5\1\55\2\5"+
    "\1\62\1\11\1\63\1\11\1\5\1\11\1\16\1\15\1\30\1\35"+
    "\1\20\1\23\1\43\1\42\1\24\1\5\1\36\1\27\1\40\1\33"+
    "\1\32\1\21\1\5\1\22\1\17\1\31\1\34\1\5\1\41\1\25"+
    "\1\37\1\5\1\60\1\11\1\61\1\0\41\6\2\0\4\5\4\0"+
    "\1\5\2\0\1\6\7\0\1\5\4\0\1\5\5\0\27\5\1\0"+
    "\37\5\1\0\u01ca\5\4\0\14\5\16\0\5\5\7\0\1\5\1\0"+
    "\1\5\21\0\160\6\5\5\1\0\2\5\2\0\4\5\10\0\1\5"+
    "\1\0\3\5\1\0\1\5\1\0\24\5\1\0\123\5\1\0\213\5"+
    "\1\0\5\6\2\0\236\5\11\0\46\5\2\0\1\5\7\0\47\5"+
    "\11\0\55\6\1\0\1\6\1\0\2\6\1\0\2\6\1\0\1\6"+
    "\10\0\33\5\5\0\3\5\15\0\4\6\7\0\1\5\4\0\13\6"+
    "\5\0\53\5\37\6\4\0\2\5\1\6\143\5\1\0\1\5\10\6"+
    "\1\0\6\6\2\5\2\6\1\0\4\6\2\5\12\6\3\5\2\0"+
    "\1\5\17\0\1\6\1\5\1\6\36\5\33\6\2\0\131\5\13\6"+
    "\1\5\16\0\12\6\41\5\11\6\2\5\4\0\1\5\5\0\26\5"+
    "\4\6\1\5\11\6\1\5\3\6\1\5\5\6\22\0\31\5\3\6"+
    "\244\0\4\6\66\5\3\6\1\5\22\6\1\5\7\6\12\5\2\6"+
    "\2\0\12\6\1\0\7\5\1\0\7\5\1\0\3\6\1\0\10\5"+
    "\2\0\2\5\2\0\26\5\1\0\7\5\1\0\1\5\3\0\4\5"+
    "\2\0\1\6\1\5\7\6\2\0\2\6\2\0\3\6\1\5\10\0"+
    "\1\6\4\0\2\5\1\0\3\5\2\6\2\0\12\6\4\5\7\0"+
    "\1\5\5\0\3\6\1\0\6\5\4\0\2\5\2\0\26\5\1\0"+
    "\7\5\1\0\2\5\1\0\2\5\1\0\2\5\2\0\1\6\1\0"+
    "\5\6\4\0\2\6\2\0\3\6\3\0\1\6\7\0\4\5\1\0"+
    "\1\5\7\0\14\6\3\5\1\6\13\0\3\6\1\0\11\5\1\0"+
    "\3\5\1\0\26\5\1\0\7\5\1\0\2\5\1\0\5\5\2\0"+
    "\1\6\1\5\10\6\1\0\3\6\1\0\3\6\2\0\1\5\17\0"+
    "\2\5\2\6\2\0\12\6\1\0\1\5\17\0\3\6\1\0\10\5"+
    "\2\0\2\5\2\0\26\5\1\0\7\5\1\0\2\5\1\0\5\5"+
    "\2\0\1\6\1\5\7\6\2\0\2\6\2\0\3\6\10\0\2\6"+
    "\4\0\2\5\1\0\3\5\2\6\2\0\12\6\1\0\1\5\20\0"+
    "\1\6\1\5\1\0\6\5\3\0\3\5\1\0\4\5\3\0\2\5"+
    "\1\0\1\5\1\0\2\5\3\0\2\5\3\0\3\5\3\0\14\5"+
    "\4\0\5\6\3\0\3\6\1\0\4\6\2\0\1\5\6\0\1\6"+
    "\16\0\12\6\11\0\1\5\7\0\3\6\1\0\10\5\1\0\3\5"+
    "\1\0\27\5\1\0\12\5\1\0\5\5\3\0\1\5\7\6\1\0"+
    "\3\6\1\0\4\6\7\0\2\6\1\0\2\5\6\0\2\5\2\6"+
    "\2\0\12\6\22\0\2\6\1\0\10\5\1\0\3\5\1\0\27\5"+
    "\1\0\12\5\1\0\5\5\2\0\1\6\1\5\7\6\1\0\3\6"+
    "\1\0\4\6\7\0\2\6\7\0\1\5\1\0\2\5\2\6\2\0"+
    "\12\6\1\0\2\5\17\0\2\6\1\0\10\5\1\0\3\5\1\0"+
    "\51\5\2\0\1\5\7\6\1\0\3\6\1\0\4\6\1\5\10\0"+
    "\1\6\10\0\2\5\2\6\2\0\12\6\12\0\6\5\2\0\2\6"+
    "\1\0\22\5\3\0\30\5\1\0\11\5\1\0\1\5\2\0\7\5"+
    "\3\0\1\6\4\0\6\6\1\0\1\6\1\0\10\6\22\0\2\6"+
    "\15\0\60\5\1\6\2\5\7\6\4\0\10\5\10\6\1\0\12\6"+
    "\47\0\2\5\1\0\1\5\2\0\2\5\1\0\1\5\2\0\1\5"+
    "\6\0\4\5\1\0\7\5\1\0\3\5\1\0\1\5\1\0\1\5"+
    "\2\0\2\5\1\0\4\5\1\6\2\5\6\6\1\0\2\6\1\5"+
    "\2\0\5\5\1\0\1\5\1\0\6\6\2\0\12\6\2\0\2\5"+
    "\42\0\1\5\27\0\2\6\6\0\12\6\13\0\1\6\1\0\1\6"+
    "\1\0\1\6\4\0\2\6\10\5\1\0\44\5\4\0\24\6\1\0"+
    "\2\6\5\5\13\6\1\0\44\6\11\0\1\6\71\0\53\5\24\6"+
    "\1\5\12\6\6\0\6\5\4\6\4\5\3\6\1\5\3\6\2\5"+
    "\7\6\3\5\4\6\15\5\14\6\1\5\17\6\2\0\46\5\12\0"+
    "\53\5\1\0\1\5\3\0\u0149\5\1\0\4\5\2\0\7\5\1\0"+
    "\1\5\1\0\4\5\2\0\51\5\1\0\4\5\2\0\41\5\1\0"+
    "\4\5\2\0\7\5\1\0\1\5\1\0\4\5\2\0\17\5\1\0"+
    "\71\5\1\0\4\5\2\0\103\5\2\0\3\6\40\0\20\5\20\0"+
    "\125\5\14\0\u026c\5\2\0\21\5\1\0\32\5\5\0\113\5\3\0"+
    "\3\5\17\0\15\5\1\0\4\5\3\6\13\0\22\5\3\6\13\0"+
    "\22\5\2\6\14\0\15\5\1\0\3\5\1\0\2\6\14\0\64\5"+
    "\40\6\3\0\1\5\3\0\2\5\1\6\2\0\12\6\41\0\3\6"+
    "\2\0\12\6\6\0\130\5\10\0\51\5\1\6\1\5\5\0\106\5"+
    "\12\0\35\5\3\0\14\6\4\0\14\6\12\0\12\6\36\5\2\0"+
    "\5\5\13\0\54\5\4\0\21\6\7\5\2\6\6\0\12\6\46\0"+
    "\27\5\5\6\4\0\65\5\12\6\1\0\35\6\2\0\13\6\6\0"+
    "\12\6\15\0\1\5\130\0\5\6\57\5\21\6\7\5\4\0\12\6"+
    "\21\0\11\6\14\0\3\6\36\5\12\6\3\0\2\5\12\6\6\0"+
    "\46\5\16\6\14\0\44\5\24\6\10\0\12\6\3\0\3\5\12\6"+
    "\44\5\122\0\3\6\1\0\25\6\4\5\1\6\4\5\1\6\15\0"+
    "\300\5\47\6\25\0\4\6\u0116\5\2\0\6\5\2\0\46\5\2\0"+
    "\6\5\2\0\10\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\37\5\2\0\65\5\1\0\7\5\1\0\1\5\3\0\3\5\1\0"+
    "\7\5\3\0\4\5\2\0\6\5\4\0\15\5\5\0\3\5\1\0"+
    "\7\5\16\0\5\6\32\0\5\6\20\0\2\5\23\0\1\5\13\0"+
    "\5\6\5\0\6\6\1\0\1\5\15\0\1\5\20\0\15\5\3\0"+
    "\32\5\26\0\15\6\4\0\1\6\3\0\14\6\21\0\1\5\4\0"+
    "\1\5\2\0\12\5\1\0\1\5\3\0\5\5\6\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\4\5\1\0\13\5\2\0\4\5\5\0"+
    "\5\5\4\0\1\5\21\0\51\5\u0a77\0\57\5\1\0\57\5\1\0"+
    "\205\5\6\0\4\5\3\6\16\0\46\5\12\0\66\5\11\0\1\5"+
    "\17\0\1\6\27\5\11\0\7\5\1\0\7\5\1\0\7\5\1\0"+
    "\7\5\1\0\7\5\1\0\7\5\1\0\7\5\1\0\7\5\1\0"+
    "\40\6\57\0\1\5\u01d5\0\3\5\31\0\11\5\6\6\1\0\5\5"+
    "\2\0\5\5\4\0\126\5\2\0\2\6\2\0\3\5\1\0\132\5"+
    "\1\0\4\5\5\0\51\5\3\0\136\5\21\0\33\5\65\0\20\5"+
    "\u0200\0\u19b6\5\112\0\u51cc\5\64\0\u048d\5\103\0\56\5\2\0\u010d\5"+
    "\3\0\20\5\12\6\2\5\24\0\57\5\1\6\14\0\2\6\1\0"+
    "\31\5\10\0\120\5\2\6\45\0\11\5\2\0\147\5\2\0\4\5"+
    "\1\0\2\5\16\0\12\5\120\0\10\5\1\6\3\5\1\6\4\5"+
    "\1\6\27\5\5\6\20\0\1\5\7\0\64\5\14\0\2\6\62\5"+
    "\21\6\13\0\12\6\6\0\22\6\6\5\3\0\1\5\4\0\12\6"+
    "\34\5\10\6\2\0\27\5\15\6\14\0\35\5\3\0\4\6\57\5"+
    "\16\6\16\0\1\5\12\6\46\0\51\5\16\6\11\0\3\5\1\6"+
    "\10\5\2\6\2\0\12\6\6\0\27\5\3\0\1\5\1\6\4\0"+
    "\60\5\1\6\1\5\3\6\2\5\2\6\5\5\2\6\1\5\1\6"+
    "\1\5\30\0\3\5\43\0\6\5\2\0\6\5\2\0\6\5\11\0"+
    "\7\5\1\0\7\5\221\0\43\5\10\6\1\0\2\6\2\0\12\6"+
    "\6\0\u2ba4\5\14\0\27\5\4\0\61\5\u2104\0\u012e\5\2\0\76\5"+
    "\2\0\152\5\46\0\7\5\14\0\5\5\5\0\1\5\1\6\12\5"+
    "\1\0\15\5\1\0\5\5\1\0\1\5\1\0\2\5\1\0\2\5"+
    "\1\0\154\5\41\0\u016b\5\22\0\100\5\2\0\66\5\50\0\15\5"+
    "\3\0\20\6\20\0\7\6\14\0\2\5\30\0\3\5\31\0\1\5"+
    "\6\0\5\5\1\0\207\5\2\0\1\6\4\0\1\5\13\0\12\6"+
    "\7\0\32\5\4\0\1\5\1\0\32\5\13\0\131\5\3\0\6\5"+
    "\2\0\6\5\2\0\6\5\2\0\3\5\3\0\2\5\3\0\2\5"+
    "\22\0\3\6\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\4\1\1\2\2\3\1\1\1\4\17\1\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\1\1\13\1\0"+
    "\1\14\14\0\1\4\57\0\1\4\7\0\1\4\37\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[135];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\324\0\u0109\0\65\0\u013e"+
    "\0\u0173\0\u01a8\0\u01dd\0\u0212\0\u0247\0\u027c\0\u02b1\0\u02e6"+
    "\0\u031b\0\u0350\0\u0385\0\u03ba\0\u03ef\0\u0424\0\u0459\0\u048e"+
    "\0\u04c3\0\65\0\65\0\65\0\65\0\65\0\65\0\u04f8"+
    "\0\u052d\0\u013e\0\65\0\u0562\0\u0597\0\u05cc\0\u0601\0\u0636"+
    "\0\u066b\0\u06a0\0\u06d5\0\u070a\0\u073f\0\u0774\0\u07a9\0\65"+
    "\0\u07de\0\u0813\0\u0848\0\u087d\0\u08b2\0\u08e7\0\u091c\0\u0951"+
    "\0\u0986\0\u09bb\0\u09f0\0\u0a25\0\u0a5a\0\u0a8f\0\u0ac4\0\u0af9"+
    "\0\u0b2e\0\u0b63\0\u0b98\0\u0bcd\0\u0c02\0\u0c37\0\u0c6c\0\u0ca1"+
    "\0\u0cd6\0\u0d0b\0\u0d40\0\u0d75\0\u0daa\0\u0ddf\0\u0e14\0\u0e49"+
    "\0\u0e7e\0\u0eb3\0\u0ee8\0\u0f1d\0\u0f52\0\u0f87\0\u0fbc\0\u0ff1"+
    "\0\u1026\0\u105b\0\u1090\0\u10c5\0\u10fa\0\u112f\0\u1164\0\u1199"+
    "\0\u11ce\0\u1203\0\u1238\0\u126d\0\u12a2\0\u12d7\0\u130c\0\u1341"+
    "\0\u1376\0\u13ab\0\u13e0\0\u1415\0\u144a\0\u147f\0\u14b4\0\u14e9"+
    "\0\u151e\0\u1553\0\u1588\0\u15bd\0\u15f2\0\u1627\0\u165c\0\u1691"+
    "\0\u16c6\0\u16fb\0\u1730\0\u1765\0\u179a\0\u17cf\0\u1804\0\u1839"+
    "\0\u186e\0\u18a3\0\u18d8\0\u190d\0\u1942\0\u1977\0\u19ac";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[135];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\2\1\4\1\5\2\2\1\6\2\2"+
    "\1\7\1\10\1\2\1\11\1\12\1\13\1\2\1\14"+
    "\1\15\1\16\1\17\1\2\1\4\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\3\2\1\27\1\2\1\30"+
    "\2\2\1\31\7\2\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\67\0\1\2\65\0\1\4\22\0\1\4"+
    "\43\0\1\41\7\0\11\41\1\0\27\41\16\0\1\6"+
    "\55\0\1\42\3\0\4\42\2\0\1\42\1\0\1\43"+
    "\11\42\1\0\31\42\2\0\3\42\16\0\1\44\13\0"+
    "\1\45\51\0\1\46\63\0\1\47\1\0\1\50\10\0"+
    "\1\51\55\0\1\52\62\0\1\53\62\0\1\54\3\0"+
    "\1\55\1\0\1\56\57\0\1\57\13\0\1\60\47\0"+
    "\1\61\5\0\1\62\72\0\1\63\54\0\1\64\63\0"+
    "\1\65\1\66\1\67\57\0\1\70\101\0\1\71\47\0"+
    "\1\72\1\0\1\73\3\0\1\74\102\0\1\75\44\0"+
    "\1\76\107\0\1\77\103\0\1\7\5\0\4\41\4\0"+
    "\11\41\1\0\27\41\26\0\1\100\101\0\1\101\60\0"+
    "\1\60\5\0\1\60\66\0\1\102\53\0\1\103\57\0"+
    "\1\60\62\0\1\104\101\0\1\105\56\0\1\44\67\0"+
    "\1\106\61\0\1\107\105\0\2\110\1\111\45\0\1\112"+
    "\71\0\1\113\57\0\1\114\65\0\1\100\61\0\1\115"+
    "\70\0\1\116\52\0\1\117\101\0\1\120\50\0\1\121"+
    "\71\0\1\122\52\0\1\123\64\0\1\124\65\0\1\125"+
    "\62\0\1\126\122\0\1\127\30\0\1\60\77\0\1\130"+
    "\51\0\1\131\64\0\1\132\67\0\1\133\75\0\1\134"+
    "\70\0\1\60\55\0\1\135\101\0\1\136\67\0\1\137"+
    "\56\0\1\140\45\0\1\141\57\0\1\142\71\0\1\143"+
    "\60\0\1\144\63\0\1\145\65\0\1\130\76\0\1\146"+
    "\50\0\1\147\76\0\1\150\65\0\1\151\55\0\1\100"+
    "\63\0\1\152\110\0\1\153\54\0\1\60\73\0\1\154"+
    "\50\0\1\141\60\0\1\155\70\0\1\120\54\0\1\51"+
    "\115\0\1\60\57\0\1\156\60\0\1\157\55\0\1\60"+
    "\64\0\1\160\65\0\1\161\54\0\1\162\62\0\1\141"+
    "\77\0\1\60\62\0\1\163\55\0\1\164\66\0\1\165"+
    "\102\0\1\60\77\0\1\60\54\0\1\166\44\0\1\167"+
    "\104\0\1\170\35\0\1\171\70\0\1\172\75\0\1\173"+
    "\57\0\1\174\75\0\1\175\51\0\1\176\73\0\1\132"+
    "\77\0\1\177\44\0\1\60\104\0\1\200\47\0\1\201"+
    "\67\0\1\132\46\0\1\202\63\0\1\203\70\0\1\100"+
    "\60\0\1\100\116\0\1\60\70\0\1\204\41\0\1\205"+
    "\63\0\1\60\74\0\1\60\77\0\1\60\54\0\1\206"+
    "\42\0\1\207\63\0\1\60\45\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6625];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\1\11\22\1\6\11\2\1\1\0"+
    "\1\11\14\0\1\11\57\0\1\1\7\0\1\1\37\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[135];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    /**
     * Create an empty lexer, yyrset will be called later to reset and assign
     * the reader
     */

    public SparqlLexer() 
	{
        super();
    }

    protected Token token(TokenType type) 
	{
        return new Token(type, yychar, yylength());
    }

    protected Token token(TokenType type, int pairValue) 
	{
        return new Token(type, yychar, yylength(), (byte)pairValue);
    }

	public int yychar() { return yychar; }
	
    private static final byte PARAN     = 1;
    private static final byte BRACKET   = 2;
    private static final byte CURLY     = 3;



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public SparqlLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public SparqlLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2246) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 4: 
          { return token(TokenType.KEYWORD);
          }
        case 13: break;
        case 7: 
          { return token(TokenType.OPERATOR,  CURLY);
          }
        case 14: break;
        case 9: 
          { return token(TokenType.OPERATOR,  BRACKET);
          }
        case 15: break;
        case 3: 
          { return token(TokenType.OPERATOR);
          }
        case 16: break;
        case 6: 
          { return token(TokenType.OPERATOR, -PARAN);
          }
        case 17: break;
        case 12: 
          { return token(TokenType.KEYWORD2);
          }
        case 18: break;
        case 5: 
          { return token(TokenType.OPERATOR,  PARAN);
          }
        case 19: break;
        case 10: 
          { return token(TokenType.OPERATOR, -BRACKET);
          }
        case 20: break;
        case 8: 
          { return token(TokenType.OPERATOR, -CURLY);
          }
        case 21: break;
        case 11: 
          { return token(TokenType.TYPE);
          }
        case 22: break;
        case 2: 
          { return token(TokenType.NUMBER);
          }
        case 23: break;
        case 1: 
          { 
          }
        case 24: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                return null;
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
